#!/usr/bin/env python3
"""
Fresh Russian News Bot - Heart of News
Brand new architecture with dynamic content generation
"""

import urllib.request
import urllib.parse
import json
import os
import time
import random
import hashlib
from datetime import datetime, timedelta
from typing import List, Dict, Any

class FreshRussianBot:
    """Brand new Russian news bot with dynamic content"""
    
    def __init__(self):
        # Telegram configuration
        self.bot_token = os.getenv('TELEGRAM_RU_BOT_TOKEN')
        self.channel_id = os.getenv('TELEGRAM_RU_CHANNEL_ID')
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
        
        # Track published content
        self.published_today = set()
        self.last_reset = datetime.now().date()
        
        # Content categories with dynamic templates
        self.content_categories = {
            "technology": {
                "icon": "üíª",
                "topics": [
                    "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
                    "–∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", 
                    "—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
                    "–±–ª–æ–∫—á–µ–π–Ω",
                    "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≤–µ—â–µ–π",
                    "–∫–≤–∞–Ω—Ç–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è"
                ],
                "actions": [
                    "–ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∞ –Ω–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
                    "–∑–∞–ø—É—Å—Ç–∏–ª–∞ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç", 
                    "–æ–±—ä—è–≤–∏–ª–∞ –æ –ø—Ä–æ—Ä—ã–≤–µ",
                    "–≤–Ω–µ–¥—Ä–∏–ª–∞ –ø–µ—Ä–µ–¥–æ–≤—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é",
                    "—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É"
                ],
                "results": [
                    "–ø–æ–≤—ã—à–∞—é—â–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ 40%",
                    "—É–ª—É—á—à–∞—é—â–µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç",
                    "–æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–µ–µ –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã",
                    "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–∏—Ä–æ–≤—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º",
                    "–ø—Ä–µ–≤–æ—Å—Ö–æ–¥—è—â–µ–µ –∞–Ω–∞–ª–æ–≥–∏"
                ]
            },
            "economy": {
                "icon": "üìà",
                "topics": [
                    "—Ä–æ—Å—Å–∏–π—Å–∫–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞",
                    "–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å",
                    "—ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–∫—Ç–æ—Ä",
                    "—ç–∫—Å–ø–æ—Ä—Ç",
                    "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
                    "–º–∞–ª—ã–π –±–∏–∑–Ω–µ—Å"
                ],
                "actions": [
                    "–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—Å—Ç–æ–π—á–∏–≤—ã–π —Ä–æ—Å—Ç",
                    "–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –¥–∏–Ω–∞–º–∏–∫—É",
                    "–¥–æ—Å—Ç–∏–≥–ª–∞ –Ω–æ–≤—ã—Ö —Ä–µ–∫–æ—Ä–¥–æ–≤",
                    "—É–∫—Ä–µ–ø–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏–∏",
                    "—Ä–∞—Å—à–∏—Ä—è–µ—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ"
                ],
                "results": [
                    "–ø—Ä–µ–≤—ã—à–∞—è –ø—Ä–æ–≥–Ω–æ–∑—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤",
                    "–æ–ø–µ—Ä–µ–∂–∞—è –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏",
                    "–ø—Ä–∏–≤–ª–µ–∫–∞—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤",
                    "—Å–æ–∑–¥–∞–≤–∞—è –Ω–æ–≤—ã–µ —Ä–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞",
                    "–æ–±–µ—Å–ø–µ—á–∏–≤–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫—É—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"
                ]
            },
            "science": {
                "icon": "üî¨",
                "topics": [
                    "–∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
                    "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
                    "—ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã",
                    "–∞—Ä–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
                    "–Ω–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
                    "—è–¥–µ—Ä–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"
                ],
                "actions": [
                    "—Å–æ–≤–µ—Ä—à–∏–ª–∏ –≤–∞–∂–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ",
                    "–∑–∞–≤–µ—Ä—à–∏–ª–∏ —É—Å–ø–µ—à–Ω—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç",
                    "–ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π",
                    "—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥",
                    "—Å–æ–∑–¥–∞–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é"
                ],
                "results": [
                    "–ø–æ–ª—É—á–∏–≤—à–µ–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–µ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ",
                    "–æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–µ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
                    "—Å–ø–æ—Å–æ–±–Ω–æ–µ –∏–∑–º–µ–Ω–∏—Ç—å –æ—Ç—Ä–∞—Å–ª—å",
                    "–ø—Ä–µ–≤–æ—Å—Ö–æ–¥—è—â–µ–µ –º–∏—Ä–æ–≤—ã–µ –∞–Ω–∞–ª–æ–≥–∏",
                    "–æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–µ–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—É–≤–µ—Ä–µ–Ω–∏—Ç–µ—Ç"
                ]
            },
            "culture": {
                "icon": "üé≠",
                "topics": [
                    "—Ä–æ—Å—Å–∏–π—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞",
                    "—Ç–µ–∞—Ç—Ä–∞–ª—å–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ",
                    "–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ",
                    "–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
                    "–º—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ",
                    "–Ω–∞—Ä–æ–¥–Ω—ã–µ —Ç—Ä–∞–¥–∏—Ü–∏–∏"
                ],
                "actions": [
                    "–ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∞ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç",
                    "–ø–æ–ª—É—á–∏–ª–∞ –ø—Ä–µ—Å—Ç–∏–∂–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É",
                    "–æ—Ç–∫—Ä—ã–ª–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—å",
                    "–∑–∞–ø—É—Å—Ç–∏–ª–∞ –∫—É–ª—å—Ç—É—Ä–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É",
                    "–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–ª–∞ –≤—ã—Å—Ç–∞–≤–∫—É"
                ],
                "results": [
                    "–ø—Ä–∏–≤–ª–µ–∫–∞—é—â—É—é –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ",
                    "–æ–±—ä–µ–¥–∏–Ω—è—é—â—É—é –ø–æ–∫–æ–ª–µ–Ω–∏—è",
                    "—Å–æ—Ö—Ä–∞–Ω—è—é—â—É—é —Ç—Ä–∞–¥–∏—Ü–∏–∏",
                    "—Ä–∞–∑–≤–∏–≤–∞—é—â—É—é —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ",
                    "—É–∫—Ä–µ–ø–ª—è—é—â—É—é –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ —Å–≤—è–∑–∏"
                ]
            }
        }
        
        # Current events and seasonal topics
        self.current_topics = [
            "–ù–æ–≤—ã–π –≥–æ–¥",
            "–î–µ–Ω—å –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –û—Ç–µ—á–µ—Å—Ç–≤–∞", 
            "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∂–µ–Ω—Å–∫–∏–π –¥–µ–Ω—å",
            "–î–µ–Ω—å –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∏–∫–∏",
            "–î–µ–Ω—å –ü–æ–±–µ–¥—ã",
            "–î–µ–Ω—å –†–æ—Å—Å–∏–∏",
            "–î–µ–Ω—å –Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –µ–¥–∏–Ω—Å—Ç–≤–∞"
        ]
        
        # Positive achievements and developments
        self.achievements = [
            "–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ",
            "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ä—ã–≤",
            "—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç",
            "–Ω–∞—É—á–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ",
            "–∫—É–ª—å—Ç—É—Ä–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ",
            "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
            "—ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã"
        ]
    
    def reset_daily_cache(self):
        """Reset published cache daily"""
        today = datetime.now().date()
        if today != self.last_reset:
            self.published_today.clear()
            self.last_reset = today
            print(f"üîÑ Daily cache reset for {today}")
    
    def generate_dynamic_news(self) -> Dict[str, Any]:
        """Generate dynamic news content"""
        category_name = random.choice(list(self.content_categories.keys()))
        category = self.content_categories[category_name]
        
        # Build dynamic content
        topic = random.choice(category["topics"])
        action = random.choice(category["actions"])
        result = random.choice(category["results"])
        
        # Create variations
        subjects = [
            "–†–æ—Å—Å–∏–π—Å–∫–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã",
            "–≠–∫—Å–ø–µ—Ä—Ç—ã",
            "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏",
            "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏",
            "–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞"
        ]
        
        locations = [
            "–≤ –ú–æ—Å–∫–≤–µ",
            "–≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ", 
            "–≤ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–µ",
            "–≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ",
            "–≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö"
        ]
        
        # Generate title with proper grammar
        subject = random.choice(subjects)
        location = random.choice(locations)
        
        # Fix grammar based on action type
        if "–ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∞" in action or "–∑–∞–ø—É—Å—Ç–∏–ª–∞" in action:
            title = f"{subject} {location} {action.replace('–ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∞', '–ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∏').replace('–∑–∞–ø—É—Å—Ç–∏–ª–∞', '–∑–∞–ø—É—Å—Ç–∏–ª–∏')} –≤ –æ–±–ª–∞—Å—Ç–∏ {topic}"
        else:
            title = f"{subject} {location} {action} –≤ –æ–±–ª–∞—Å—Ç–∏ {topic}"
        
        # Generate content with proper grammar
        fixed_action = action.replace('–ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∞', '–ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∏').replace('–∑–∞–ø—É—Å—Ç–∏–ª–∞', '–∑–∞–ø—É—Å—Ç–∏–ª–∏').replace('–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç', '–ø–æ–∫–∞–∑–∞–ª–∏')
        
        content_parts = [
            f"{subject} {fixed_action} –≤ –æ–±–ª–∞—Å—Ç–∏ {topic}, {result}.",
            f"–ü—Ä–æ–µ–∫—Ç —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è {location} –ø—Ä–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º.",
            f"–≠–∫—Å–ø–µ—Ä—Ç—ã –æ—Ç–º–µ—á–∞—é—Ç –≤–∞–∂–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –æ—Ç—Ä–∞—Å–ª–∏.",
            f"–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –¥—Ä—É–≥–∏–µ —Ä–µ–≥–∏–æ–Ω—ã —Å—Ç—Ä–∞–Ω—ã."
        ]
        
        content = " ".join(content_parts)
        
        return {
            "title": title.capitalize(),
            "content": content,
            "category": category_name,
            "icon": category["icon"],
            "timestamp": datetime.now()
        }
    
    def generate_seasonal_news(self) -> Dict[str, Any]:
        """Generate seasonal/holiday content"""
        current_month = datetime.now().month
        
        seasonal_content = {
            1: {"event": "–ù–æ–≤—ã–π –≥–æ–¥", "theme": "–ø–ª–∞–Ω—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"},
            2: {"event": "–î–µ–Ω—å –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –û—Ç–µ—á–µ—Å—Ç–≤–∞", "theme": "–æ–±–æ—Ä–æ–Ω–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"},
            3: {"event": "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∂–µ–Ω—Å–∫–∏–π –¥–µ–Ω—å", "theme": "–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∂–µ–Ω—â–∏–Ω"},
            4: {"event": "–î–µ–Ω—å –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∏–∫–∏", "theme": "–∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã"},
            5: {"event": "–î–µ–Ω—å –ü–æ–±–µ–¥—ã", "theme": "–ø–∞–º—è—Ç—å –∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏"},
            6: {"event": "–î–µ–Ω—å –†–æ—Å—Å–∏–∏", "theme": "–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã"},
            12: {"event": "–î–µ–Ω—å –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏", "theme": "–ø—Ä–∞–≤–æ–≤—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã"}
        }
        
        if current_month in seasonal_content:
            event_data = seasonal_content[current_month]
            
            title = f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ {event_data['event']}: –Ω–æ–≤—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã –≤ –æ–±–ª–∞—Å—Ç–∏ {event_data['theme']}"
            content = f"–í –ø—Ä–µ–¥–¥–≤–µ—Ä–∏–∏ {event_data['event']} —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∏ –∫–æ–º–ø–ª–µ–∫—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ {event_data['theme']}. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤–∫–ª—é—á–∞–µ—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ, –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã."
            
            return {
                "title": title,
                "content": content,
                "category": "special",
                "icon": "üá∑üá∫",
                "timestamp": datetime.now()
            }
        
        return self.generate_dynamic_news()
    
    def create_telegram_message(self, news_item: Dict[str, Any]) -> str:
        """Create formatted Telegram message"""
        
        # Time and category tags
        time_tag = datetime.now().strftime("%H:%M")
        category_tag = f"#{news_item['category'].title()}"
        
        # Regional flags for variety
        flags = ["üá∑üá∫", "üåç", "‚≠ê", "üî•", "‚ú®"]
        flag = random.choice(flags)
        
        message = f"""{news_item['icon']} **–ù–û–í–û–°–¢–ò –†–û–°–°–ò–ò**

**{news_item['title']}**

{news_item['content']}

{flag} #–ù–æ–≤–æ—Å—Ç–∏–†–æ—Å—Å–∏–∏ {category_tag} #{time_tag.replace(':', '')}"""
        
        return message
    
    def send_to_telegram(self, message: str) -> bool:
        """Send message to Telegram channel"""
        if not self.bot_token or not self.channel_id:
            print("‚ùå Telegram not configured")
            return False
        
        try:
            data = {
                'chat_id': self.channel_id,
                'text': message,
                'parse_mode': 'Markdown',
                'disable_web_page_preview': True
            }
            
            encoded_data = urllib.parse.urlencode(data).encode('utf-8')
            request = urllib.request.Request(
                f"{self.base_url}/sendMessage",
                data=encoded_data,
                headers={'Content-Type': 'application/x-www-form-urlencoded'}
            )
            
            with urllib.request.urlopen(request, timeout=10) as response:
                result = json.loads(response.read().decode())
            
            if result.get("ok"):
                print(f"‚úÖ Message sent successfully")
                return True
            else:
                print(f"‚ùå Telegram API error: {result.get('description', 'Unknown')}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error sending message: {e}")
            return False
    
    def get_content_hash(self, title: str) -> str:
        """Generate hash for content tracking"""
        return hashlib.md5(title.lower().encode()).hexdigest()[:8]
    
    def publish_news_item(self) -> bool:
        """Generate and publish a single news item"""
        # Reset cache if new day
        self.reset_daily_cache()
        
        # Generate content (70% dynamic, 30% seasonal)
        if random.random() < 0.7:
            news_item = self.generate_dynamic_news()
        else:
            news_item = self.generate_seasonal_news()
        
        # Check for duplicates
        content_hash = self.get_content_hash(news_item["title"])
        if content_hash in self.published_today:
            return False
        
        # Create and send message
        message = self.create_telegram_message(news_item)
        
        print(f"üÜï Publishing: {news_item['title'][:60]}...")
        
        if self.send_to_telegram(message):
            self.published_today.add(content_hash)
            print(f"‚úÖ Published to channel")
            return True
        else:
            print(f"‚ùå Failed to publish")
            return False
    
    def run_publishing_cycle(self) -> int:
        """Run one publishing cycle"""
        print(f"üîÑ Publishing cycle - {datetime.now().strftime('%H:%M:%S')}")
        
        # Publish 1-3 items per cycle
        items_to_publish = random.randint(1, 3)
        published_count = 0
        
        for i in range(items_to_publish):
            if self.publish_news_item():
                published_count += 1
                # Delay between publications
                if i < items_to_publish - 1:
                    time.sleep(5)
        
        print(f"üìä Published {published_count}/{items_to_publish} items")
        print(f"üìà Total published today: {len(self.published_today)}")
        
        return published_count
    
    def run_continuous(self, interval_minutes: int = 20):
        """Run bot continuously"""
        print(f"üöÄ FRESH RUSSIAN NEWS BOT - HEART OF NEWS")
        print(f"üì∫ Channel: {self.channel_id}")
        print(f"‚è∞ Publishing every {interval_minutes} minutes")
        print(f"üéØ Dynamic content with 4 categories")
        print("=" * 50)
        
        total_published = 0
        cycle_count = 0
        
        try:
            while True:
                cycle_count += 1
                print(f"\nüìÖ CYCLE #{cycle_count}")
                
                published_this_cycle = self.run_publishing_cycle()
                total_published += published_this_cycle
                
                next_run = datetime.now() + timedelta(minutes=interval_minutes)
                print(f"‚è≥ Next cycle at: {next_run.strftime('%H:%M:%S')}")
                print(f"üèÜ Session total: {total_published} articles")
                
                time.sleep(interval_minutes * 60)
                
        except KeyboardInterrupt:
            print(f"\nüõë Bot stopped")
            print(f"üìä Final stats: {total_published} articles published")
        except Exception as e:
            print(f"\n‚ùå Error: {e}")
            print("üîÑ Restarting in 30 seconds...")
            time.sleep(30)
            self.run_continuous(interval_minutes)

def main():
    """Main entry point"""
    print("üá∑üá∫ FRESH RUSSIAN NEWS BOT")
    print("Dynamic Content Generation")
    print("=" * 40)
    
    # Check environment
    if not os.getenv('TELEGRAM_RU_BOT_TOKEN') or not os.getenv('TELEGRAM_RU_CHANNEL_ID'):
        print("‚ùå Missing environment variables!")
        print("Set TELEGRAM_RU_BOT_TOKEN and TELEGRAM_RU_CHANNEL_ID")
        return
    
    print(f"‚úÖ Configured for: {os.getenv('TELEGRAM_RU_CHANNEL_ID')}")
    
    bot = FreshRussianBot()
    
    # Run mode
    import sys
    if len(sys.argv) > 1 and sys.argv[1] == "--once":
        print("\nüß™ Single run mode")
        bot.run_publishing_cycle()
    else:
        print("\nüîÑ Continuous mode")
        bot.run_continuous(20)

if __name__ == "__main__":
    main()