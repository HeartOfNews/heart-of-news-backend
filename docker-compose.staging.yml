version: '3.8'

# Staging environment docker-compose configuration
# This configuration is optimized for a staging environment with:
# - Reduced resource allocation compared to production
# - All monitoring and observability tools enabled
# - External services like database can be configured with environment variables

services:
  api:
    image: heartofnews/backend:${STAGING_TAG:-develop}
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENV_FILE=.env.staging
    env_file:
      - .env.staging
    volumes:
      - prometheus_data:/tmp/prometheus_multiproc
    depends_on:
      - redis
      - elasticsearch
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    command: ["/app/scripts/start.sh"]

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  elasticsearch:
    image: elasticsearch:8.7.0
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"\\|\"status\":\"yellow\"'"]
      interval: 30s
      timeout: 30s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  celery_worker:
    image: heartofnews/backend:${STAGING_TAG:-develop}
    restart: unless-stopped
    env_file:
      - .env.staging
    environment:
      - ENV_FILE=.env.staging
    depends_on:
      - redis
    command: celery -A app.worker worker --loglevel=info --concurrency=2
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  celery_beat:
    image: heartofnews/backend:${STAGING_TAG:-develop}
    restart: unless-stopped
    env_file:
      - .env.staging
    environment:
      - ENV_FILE=.env.staging
    depends_on:
      - redis
      - celery_worker
    command: celery -A app.worker beat --loglevel=info
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M

  scraper:
    image: heartofnews/backend:${STAGING_TAG:-develop}
    restart: unless-stopped
    env_file:
      - .env.staging
    environment:
      - ENV_FILE=.env.staging
    depends_on:
      - redis
    command: python -m app.scraper.main
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Include monitoring stack for staging environment
  prometheus:
    image: prom/prometheus:v2.44.0
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.staging.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  grafana:
    image: grafana/grafana:9.5.2
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-heartofnews}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=https://grafana-staging.heartofnews.com
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  alertmanager:
    image: prom/alertmanager:v0.25.0
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager/alertmanager.staging.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M

  # Staging environment proxy for SSL termination and routing
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d/staging.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - api
      - grafana
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M

volumes:
  redis_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:
  alertmanager_data: