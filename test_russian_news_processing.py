#!/usr/bin/env python3
"""
Test Russian News Processing - Demonstration Script
Shows how the propaganda detection and rewriting works for Russian news
"""

import json
import sys
import os
from datetime import datetime

# Add app to path
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

# Sample Russian news articles with propaganda content
SAMPLE_ARTICLES = [
    {
        "title": "–ó–∞–ø–∞–¥–Ω—ã–µ –º–∞—Ä–∏–æ–Ω–µ—Ç–∫–∏ —É–≥—Ä–æ–∂–∞—é—Ç –†–æ—Å—Å–∏–∏ –Ω–æ–≤—ã–º–∏ —Å–∞–Ω–∫—Ü–∏—è–º–∏",
        "content": "–†–µ–∂–∏–º –≤ –ö–∏–µ–≤–µ –ø—Ä–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ —Å–≤–æ–∏—Ö –∑–∞–ø–∞–¥–Ω—ã—Ö –∫—É–∫–ª–æ–≤–æ–¥–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —ç—Å–∫–∞–ª–∞—Ü–∏—é –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞. –°–æ–≥–ª–∞—Å–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —É–∫—Ä–∞–∏–Ω—Å–∫–∏–µ —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—ã –ø–ª–∞–Ω–∏—Ä—É—é—Ç –Ω–æ–≤—ã–µ –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–∏ –ø—Ä–æ—Ç–∏–≤ –º–∏—Ä–Ω–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è. –≠—Ç–æ –≤–æ–∑–º—É—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —ç–∫–∑–∏—Å—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é —É–≥—Ä–æ–∑—É –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏.",
        "source": "EurAsia Daily"
    },
    {
        "title": "–ï–° –æ–±–≤–∏–Ω—è–µ—Ç –†–æ—Å—Å–∏—é –≤ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –ø—Ä–∞–≤–∞",
        "content": "–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–∏ –ï–≤—Ä–æ–ø–µ–π—Å–∫–æ–≥–æ —Å–æ—é–∑–∞ –∑–∞—è–≤–∏–ª–∏ –æ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –ø—Ä–∞–≤–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –†–æ—Å—Å–∏–∏. –ü–æ –¥–∞–Ω–Ω—ã–º –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤, —Å–∏—Ç—É–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏–∑—É—á–µ–Ω–∏—è. –ë—Ä—é—Å—Å–µ–ª—å –ø—Ä–∏–∑—ã–≤–∞–µ—Ç –∫ –º–∏—Ä–Ω–æ–º—É —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—é –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —á–µ—Ä–µ–∑ –¥–∏–ø–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã.",
        "source": "BBC Russian"
    },
    {
        "title": "–®–æ–∫–∏—Ä—É—é—â–∏–µ —Ñ–∞–∫—Ç—ã –æ –∫–æ—Ä—Ä—É–ø—Ü–∏–∏ –≤ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–µ",
        "content": "–†–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞–ª–æ, —á—Ç–æ –∫–æ—Ä—Ä—É–º–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∏–Ω–æ–≤–Ω–∏–∫–∏ —É–∫—Ä–∞–ª–∏ –º–∏–ª–ª–∏–∞—Ä–¥—ã —Ä—É–±–ª–µ–π –∏–∑ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞. –ü–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –∏–Ω—Å–∞–π–¥–µ—Ä–æ–≤, —Å—Ö–µ–º–∞ —Ä–∞–±–æ—Ç–∞–ª–∞ –≥–æ–¥–∞–º–∏. –≠—Ç–∏ —É–∂–∞—Å–∞—é—â–∏–µ —Ñ–∞–∫—Ç—ã —Ç—Ä–µ–±—É—é—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ—Ä–≥–∞–Ω–∞–º–∏.",
        "source": "Meduza"
    }
]


class MockPropagandaDetector:
    """Mock propaganda detector for testing"""
    
    def analyze_content(self, title: str, content: str, source_info: dict) -> dict:
        """Analyze content for propaganda and bias"""
        full_text = f"{title} {content}".lower()
        
        # Detect propaganda indicators
        propaganda_score = 0.0
        propaganda_techniques = []
        
        # Check for loaded language
        loaded_words = ["–º–∞—Ä–∏–æ–Ω–µ—Ç–∫–∏", "—Ä–µ–∂–∏–º", "—ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—ã", "–∫—É–∫–ª–æ–≤–æ–¥—ã", "–ø—Ä–æ–≤–æ–∫–∞—Ü–∏–∏"]
        for word in loaded_words:
            if word in full_text:
                propaganda_score += 0.3
                propaganda_techniques.append("loaded_language")
                break
        
        # Check for emotional manipulation
        emotional_words = ["–≤–æ–∑–º—É—Ç–∏—Ç–µ–ª—å–Ω–æ–µ", "—à–æ–∫–∏—Ä—É—é—â–∏–µ", "—É–∂–∞—Å–∞—é—â–∏–µ", "—ç–∫–∑–∏—Å—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é —É–≥—Ä–æ–∑—É"]
        for word in emotional_words:
            if word in full_text:
                propaganda_score += 0.2
                propaganda_techniques.append("emotional_manipulation")
                break
        
        # Check for unverified claims
        unverified_phrases = ["—Å–æ–≥–ª–∞—Å–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º", "–ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –∏–Ω—Å–∞–π–¥–µ—Ä–æ–≤"]
        for phrase in unverified_phrases:
            if phrase in full_text:
                propaganda_score += 0.1
                propaganda_techniques.append("unverified_claims")
                break
        
        # Determine bias based on source reliability
        reliability_score = source_info.get("reliability_score", 0.8)
        bias_score = 0.0
        
        if "EurAsia Daily" in source_info.get("name", ""):
            bias_score = 0.4  # Pro-government bias
        elif "BBC" in source_info.get("name", ""):
            bias_score = 0.0  # Neutral
        
        # Make recommendation
        if propaganda_score > 0.6:
            recommendation = "REJECT"
        elif propaganda_score > 0.3 or len(propaganda_techniques) > 1:
            recommendation = "REVIEW"
        else:
            recommendation = "APPROVE"
        
        return {
            "propaganda_score": min(1.0, propaganda_score),
            "bias_score": bias_score,
            "reliability_score": reliability_score,
            "propaganda_techniques": list(set(propaganda_techniques)),
            "recommendation": recommendation,
            "confidence": 0.9
        }


class MockNewsRewriter:
    """Mock news rewriter for testing"""
    
    def __init__(self):
        self.propaganda_replacements = {
            "–º–∞—Ä–∏–æ–Ω–µ—Ç–∫–∏": "–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–∏",
            "—Ä–µ–∂–∏–º": "–ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ", 
            "—ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—ã": "–≤–æ–æ—Ä—É–∂–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã",
            "–∫—É–∫–ª–æ–≤–æ–¥—ã": "–ø–∞—Ä—Ç–Ω–µ—Ä—ã",
            "–ø—Ä–æ–≤–æ–∫–∞—Ü–∏–∏": "–¥–µ–π—Å—Ç–≤–∏—è",
            "–≤–æ–∑–º—É—Ç–∏—Ç–µ–ª—å–Ω–æ–µ": "—Å–ø–æ—Ä–Ω–æ–µ",
            "—à–æ–∫–∏—Ä—É—é—â–∏–µ": "–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ",
            "—É–∂–∞—Å–∞—é—â–∏–µ": "—Å–µ—Ä—å–µ–∑–Ω—ã–µ",
            "—ç–∫–∑–∏—Å—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é —É–≥—Ä–æ–∑—É": "—Å–µ—Ä—å–µ–∑–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É"
        }
    
    def rewrite_content(self, title: str, content: str, analysis: dict) -> dict:
        """Rewrite content to remove propaganda"""
        rewritten_title = title
        rewritten_content = content
        changes_made = []
        
        # Apply replacements
        for original, replacement in self.propaganda_replacements.items():
            if original in rewritten_title:
                rewritten_title = rewritten_title.replace(original, replacement)
                changes_made.append(f"title: {original} -> {replacement}")
            
            if original in rewritten_content:
                rewritten_content = rewritten_content.replace(original, replacement)
                changes_made.append(f"content: {original} -> {replacement}")
        
        # Add qualifiers to unverified claims
        if "–°–æ–≥–ª–∞—Å–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º" in rewritten_content:
            rewritten_content = rewritten_content.replace("–°–æ–≥–ª–∞—Å–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º", "–ü–æ –∏–º–µ—é—â–∏–º—Å—è –¥–∞–Ω–Ω—ã–º")
            changes_made.append("qualified unverified claims")
        
        if "–ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –∏–Ω—Å–∞–π–¥–µ—Ä–æ–≤" in rewritten_content:
            rewritten_content = rewritten_content.replace("–ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –∏–Ω—Å–∞–π–¥–µ—Ä–æ–≤", "—Å–æ–≥–ª–∞—Å–Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º")
            changes_made.append("qualified insider reports")
        
        return {
            "title": rewritten_title,
            "content": rewritten_content,
            "changes_made": changes_made
        }


def format_telegram_message(title: str, content: str, source: str) -> str:
    """Format article for Telegram publishing"""
    # Limit content length for Telegram
    summary = content[:250] + "..." if len(content) > 250 else content
    
    message = f"""üî¥ **–ü–†–û–í–ï–†–ï–ù–ù–´–ï –ù–û–í–û–°–¢–ò**

**{title}**

{summary}

üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫: {source}
‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ

#–ù–æ–≤–æ—Å—Ç–∏ #–†–æ—Å—Å–∏—è #–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ–ù–æ–≤–æ—Å—Ç–∏"""
    
    return message


def main():
    """Test the Russian news processing pipeline"""
    print("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò –†–û–°–°–ò–ô–°–ö–ò–• –ù–û–í–û–°–¢–ï–ô ===\n")
    
    detector = MockPropagandaDetector()
    rewriter = MockNewsRewriter()
    
    processed_articles = []
    
    for i, article in enumerate(SAMPLE_ARTICLES, 1):
        print(f"üì∞ –°–¢–ê–¢–¨–Ø {i}: {article['title']}")
        print(f"–ò—Å—Ç–æ—á–Ω–∏–∫: {article['source']}")
        print("-" * 80)
        
        # Create source info
        source_info = {
            "name": article["source"],
            "reliability_score": 0.9 if "BBC" in article["source"] else (0.8 if "Meduza" in article["source"] else 0.7)
        }
        
        # Analyze for propaganda
        analysis = detector.analyze_content(article["title"], article["content"], source_info)
        
        print(f"üîç –ê–ù–ê–õ–ò–ó:")
        print(f"  ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã: {analysis['propaganda_score']:.2f}")
        print(f"  ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç–∏: {analysis['bias_score']:.2f}")
        print(f"  ‚Ä¢ –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {analysis['reliability_score']:.2f}")
        print(f"  ‚Ä¢ –¢–µ—Ö–Ω–∏–∫–∏ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã: {', '.join(analysis['propaganda_techniques']) if analysis['propaganda_techniques'] else '–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ'}")
        print(f"  ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {analysis['recommendation']}")
        
        # Process based on recommendation
        if analysis["recommendation"] == "REJECT":
            print("‚ùå –°–¢–ê–¢–¨–Ø –û–¢–ö–õ–û–ù–ï–ù–ê –∏–∑-–∑–∞ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã")
            print()
            continue
        
        elif analysis["recommendation"] == "REVIEW" or analysis["propaganda_score"] > 0.3:
            print("‚úèÔ∏è –ü–ï–†–ï–ü–ò–°–´–í–ê–ù–ò–ï –°–¢–ê–¢–¨–ò –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã...")
            
            rewrite_result = rewriter.rewrite_content(article["title"], article["content"], analysis)
            
            print(f"üìù –ò–∑–º–µ–Ω–µ–Ω–∏—è:")
            for change in rewrite_result["changes_made"]:
                print(f"    ‚Ä¢ {change}")
            
            final_title = rewrite_result["title"]
            final_content = rewrite_result["content"]
            rewrite_applied = True
            
        else:
            print("‚úÖ –°–¢–ê–¢–¨–Ø –û–î–û–ë–†–ï–ù–ê –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            final_title = article["title"]
            final_content = article["content"]
            rewrite_applied = False
        
        # Format for Telegram
        telegram_message = format_telegram_message(final_title, final_content, article["source"])
        
        processed_articles.append({
            "original_title": article["title"],
            "final_title": final_title,
            "original_content": article["content"],
            "final_content": final_content,
            "source": article["source"],
            "analysis": analysis,
            "rewrite_applied": rewrite_applied,
            "telegram_message": telegram_message
        })
        
        print("üì± –°–û–û–ë–©–ï–ù–ò–ï –î–õ–Ø –¢–ï–õ–ï–ì–†–ê–ú:")
        print(telegram_message)
        print()
    
    # Summary
    print("=" * 80)
    print("üìä –ò–¢–û–ì–ò –û–ë–†–ê–ë–û–¢–ö–ò:")
    print(f"–í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(processed_articles)}")
    rewritten_count = sum(1 for a in processed_articles if a["rewrite_applied"])
    print(f"–°—Ç–∞—Ç–µ–π –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–æ: {rewritten_count}")
    print(f"–°—Ç–∞—Ç–µ–π –æ–¥–æ–±—Ä–µ–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {len(processed_articles) - rewritten_count}")
    print(f"–°—Ç–∞—Ç–µ–π –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: {len(SAMPLE_ARTICLES) - len(processed_articles)}")
    
    print("\n‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –≥–æ—Ç–æ–≤—ã –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram!")
    
    return processed_articles


if __name__ == "__main__":
    main()