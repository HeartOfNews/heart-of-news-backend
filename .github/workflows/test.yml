name: Tests

on:
  push:
    branches: [ main, develop, feature/*, bugfix/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: heart_of_news_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov
    
    - name: Create .env file
      run: |
        cat > .env << EOL
        POSTGRES_SERVER=localhost
        POSTGRES_USER=postgres
        POSTGRES_PASSWORD=postgres
        POSTGRES_DB=heart_of_news_test
        PROJECT_NAME=Heart of News Test
        SECRET_KEY=testsecretkey
        CORS_ORIGINS=http://localhost:3000
        REDIS_HOST=localhost
        REDIS_PORT=6379
        ELASTICSEARCH_HOST=localhost
        ELASTICSEARCH_PORT=9200
        STORAGE_BUCKET_NAME=heart-of-news-media-test
        SCRAPER_USER_AGENT=HeartOfNewsBot-Test/1.0
        SCRAPER_REQUEST_DELAY=0.1
        EOL
    
    - name: Run migrations
      run: |
        alembic upgrade head
    
    - name: Run unit tests
      run: |
        pytest --cov=app tests/services/ -v
    
    - name: Run API tests
      run: |
        pytest --cov=app --cov-append tests/api/ -v
    
    - name: Run end-to-end tests
      run: |
        pytest --cov=app --cov-append tests/test_workflow.py -v
    
    - name: Generate coverage report
      run: |
        pytest --cov=app --cov-report=xml tests/
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false